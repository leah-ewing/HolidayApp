name: HolidayHub

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      DEV_KEY: ${{ secrets.DEV_KEY }}
      SENDER_EMAIL: ${{ secrets.SENDER_EMAIL }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      API_KEY: ${{ secrets.API_KEY }}
      DEVELOPER: ${{ secrets.DEVELOPER }}
      DOMAIN: ${{ secrets.DOMAIN }}
      EMAIL_PREFIX: ${{ secrets.EMAIL_PREFIX }}
      API_URI: ${{ secrets.API_URI }}
      ENCRYPTION_DIRECTORY: ${{ secrets.ENCRYPTION_DIRECTORY }}
      ENCRYPTION_SCRIPT: ${{ secrets.ENCRYPTION_SCRIPT }}
      ENCRYPTION_PATH: ${{ secrets.ENCRYPTION_PATH }}
      ENCRYPTION_DEV_KEY: ${{ secrets.ENCRYPTION_DEV_KEY }}
      ENCRYPTION_DICT_PATH: ${{ secrets.ENCRYPTION_DICT_PATH }}
      ENCRYPTION_CIPHER_KEY: ${{ secrets.ENCRYPTION_CIPHER_KEY }}
      VALID_ENCRYPTION_KEYS_PATH: ${{ secrets.VALID_ENCRYPTION_KEYS_PATH }}
      DB_USERNAME: postgres
      # DB_PASSWORD: ${{ secrets.DB_PASSWORD }} 
      DB_PASSWORD: test
      # DB_NAME: ${{ secrets.DB_NAME }}
      DB_NAME: holidaydb_prod
      # DB_URI: ${{ secrets.DB_URI }}
      DB_URI: postgresql://postgres:test@localhost:5432/holidaydb_prod
      LOGO_URL: ${{ secrets.LOGO_URL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      PGPASSWORD: test

    services:
      postgres:
          image: postgres
          env:
            POSTGRES_HOST: localhost
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: test ## testing
            POSTGRES_DB: holidaydb_prod
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            - 5432:5432

    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3'

      - name: Install dependencies
        run: pip3 install -r requirements.txt

      - name: Create and initialize log files
        run: |
          touch errors/error_log.json && echo "[]" > errors/error_log.json
          touch jobs/jobs_log.json && echo "[]" > jobs/jobs_log.json
          
      - name: Create and populate encryption files
        run: |
          mkdir $ENCRYPTION_DIRECTORY
          touch $VALID_ENCRYPTION_KEYS_PATH && echo $VALID_ENCRYPTION_KEYS > $VALID_ENCRYPTION_KEYS_PATH
          touch $ENCRYPTION_DICT_PATH && echo "[$ENCRYPTION_DICTIONARY]" > $ENCRYPTION_DICT_PATH
          touch $ENCRYPTION_PATH && echo -e "$ENCRYPTION_SCRIPT" > $ENCRYPTION_PATH

      - name: Install Nginx
        run: sudo apt-get install nginx

      - name: Configure Nginx
        run: |
          sudo cp config/nginx.conf /etc/nginx/nginx.conf
          sudo systemctl restart nginx

      - name: Start Postgres service
        run: |
          sudo service postgresql start
          sleep 10

      - name: Create database
        run: |
          export PGPASSWORD="$DB_PASSWORD"
          dropdb $DB_NAME
          createdb -h localhost -p 5432 -U $DB_USERNAME -W $DB_PASSWORD $DB_NAME

      - name: Start Flask app using Gunicorn
        run: gunicorn -b 0.0.0.0:8000 --daemon server:app

      - name: Seed database
        run: python3 database/seed_database.py
          
      - name: Start jobs
        run: python3 jobs/run_jobs.py